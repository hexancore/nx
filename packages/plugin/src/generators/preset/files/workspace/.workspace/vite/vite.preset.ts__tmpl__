/// <reference types='vitest' />
import { defineConfig } from 'vite';
import vue from '@vitejs/plugin-vue';
import dts from 'vite-plugin-dts';
import * as path from 'path';
import { nxViteTsPaths } from '@nx/vite/plugins/nx-tsconfig-paths.plugin';
import { libInjectCss } from 'vite-plugin-lib-inject-css';

import resolvePlugin from '@rollup/plugin-node-resolve';
import basicSsl from '@vitejs/plugin-basic-ssl';
import VueI18nPlugin from '@intlify/unplugin-vue-i18n/vite';
import { defineProjectAssetsBuildOptions, AssetOutputEntry } from './assets';

export interface ProjectMeta {
  name: string;
  workspaceRootRelative: string;
  root: string;
}

function createViteTestConfig(project: ProjectMeta) {
  return {
    globals: true,
    cache: {
      dir: `${project.workspaceRootRelative}/tmp/vitest/${project.name}`,
    },
    environment: 'jsdom',
    include: ['test/**/*.test.{ts,mts,cts,tsx}'],

    reporters: ['default'],
    coverage: {
      reportsDirectory: `${project.workspaceRootRelative}/tmp/coverage/${project.name}`,
      provider: 'v8',
    },
  };
}

export interface ProjectViteConfigOptions {
  assetTypes?: AssetOutputEntry[];
}

// eslint-disable-next-line @typescript-eslint/no-empty-interface
export interface LibProjectViteConfigOptions extends ProjectViteConfigOptions {

}

export function defineLibProjectViteConfig(projectDir: string, project: ProjectMeta, options?: LibProjectViteConfigOptions) {
  options = options ?? {};
  const assetsConfig = defineProjectAssetsBuildOptions(options.assetTypes);
  return defineConfig({
    root: projectDir,
    cacheDir: `${project.workspaceRootRelative}/tmp/vite/${project.name}`,

    plugins: [
      vue(),
      nxViteTsPaths(),
      dts({
        entryRoot: 'src',
        tsconfigPath: path.join(projectDir, 'tsconfig.build.json'),
      }),
      libInjectCss(),
    ],

    // Configuration for building your library.
    // See: https://vitejs.dev/guide/build.html#library-mode
    build: {
      outDir: `${project.workspaceRootRelative}/dist/${project.root}`,
      emptyOutDir: true,
      cssCodeSplit: true,
      reportCompressedSize: true,
      commonjsOptions: {
        transformMixedEsModules: true,
      },
      lib: {
        // Could also be a dictionary or array of multiple entry points.
        entry: 'src/index.ts',
        name: project.name,
        fileName: 'index',
        // Change this to the formats you want to support.
        // Don't forget to update your package.json as well.
        formats: ['es'],
      },
      rollupOptions: {
        rollupOptions: {
          preserveSymlinks: true,
          output: {
            preserveModules: false,
            entryFileNames: assetsConfig.entryFileNames,
            assetFileNames: assetsConfig.assetFileNames,
            chunkFileNames: assetsConfig.chunkFileNames
          }
        },
        // External packages that should not be bundled into your library.
        external: [],
      },
    },

    test: createViteTestConfig(project)
  });
}


export interface AppProjectViteConfigOptions extends ProjectViteConfigOptions {
  server?: {
    port?: number,
    host?: string;
  },

  preview?: {
    port?: number,
    host?: string;
  };
}

export function defineAppProjectViteConfig(projectDir: string, project: ProjectMeta, options?: AppProjectViteConfigOptions) {
  options = options ?? {};

  const assetsConfig = defineProjectAssetsBuildOptions(options?.assetTypes);
  return defineConfig({
    root: projectDir,
    cacheDir: `${project.workspaceRootRelative}/tmp/vite/${project.name}`,
    server: {
      port: 20021,
      host: 'localhost',

      fs: {
        // Allow serving files from one level up to the project root
        strict: false,
      },

      ...(options?.server ?? {})
    },

    preview: {
      port: 20022,
      host: 'localhost',
      ...(options?.preview ?? {})
    },

    publicDir: path.resolve(projectDir, './public'),
    build: {
      outDir: `${project.workspaceRootRelative}/dist/${project.root}`,
      reportCompressedSize: true,
      commonjsOptions: { transformMixedEsModules: true },
      minify: true,
      assetsDir: assetsConfig.assetsDir,
      // don't inline anything for demo
      assetsInlineLimit: 0,
      emptyOutDir: true,
      rollupOptions: {
        preserveSymlinks: true,
        output: {
          entryFileNames: assetsConfig.entryFileNames,
          assetFileNames: assetsConfig.assetFileNames,
          chunkFileNames: assetsConfig.chunkFileNames
        }
      }
    },

    plugins: [
      vue({
        template: {
          compilerOptions: {
            //isCustomElement: (tag) => /^[A-Z]/.test(tag)
          },
        },
      }),
      nxViteTsPaths(),
      VueI18nPlugin({
        include: [path.resolve(projectDir, './src/*/Asset/Locale/**')],
        defaultSFCLang: 'yaml',
        allowDynamic: true,
        dropMessageCompiler: true,
      }),
      resolvePlugin(undefined),
      basicSsl(),
    ],

    // Uncomment this if you are using workers.
    // worker: {
    //  plugins: [ nxViteTsPaths() ],
    // },

    test: createViteTestConfig(project)
  });
}