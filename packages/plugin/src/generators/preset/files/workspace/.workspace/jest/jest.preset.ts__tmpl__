import type { JestConfigWithTsJest } from 'ts-jest';
import { pathsToModuleNameMapper } from 'ts-jest';
import * as fs from 'fs';
import * as path from 'path';

export interface ProjectMeta {
  name: string;
  workspaceRootRelative: string;
  root: string;
}

export function defineProjectJestConfig(projectDir: string, project: ProjectMeta): JestConfigWithTsJest {
  const tsConfig = JSON.parse(fs.readFileSync(`${projectDir}/tsconfig.json`, 'utf-8'));
  const jestConfig: JestConfigWithTsJest = {
    extensionsToTreatAsEsm: ['.ts'],
    displayName: project.name,
    resolver: '@nx/jest/plugins/resolver',
    transform: {
      '^.+\\.m?[tj]sx?$': ['ts-jest', { tsconfig: `${projectDir}/tsconfig.test.json` }],
    },
    runner: "groups",
    moduleFileExtensions: ["js", "json", "ts"],
    moduleNameMapper: pathsToModuleNameMapper(tsConfig.compilerOptions.paths),
    testMatch: ["<rootDir>/test/**/*.test.ts"],
    setupFiles: [],
    setupFilesAfterEnv: ["jest-expect-message", "<rootDir>/test/config.ts"],
    coverageDirectory: `${project.workspaceRootRelative}/tmp/coverage/${project.name}`,
    testEnvironment: "node",
    transformIgnorePatterns: ["/node_modules/"]
  };

  return jestConfig;
}
