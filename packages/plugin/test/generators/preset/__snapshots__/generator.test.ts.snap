// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`preset generator .env should match snapshot 1`] = `
"PROJECT=test-workspace
TZ=Etc/UTC
APP_HOME=./
"
`;

exports[`preset generator .env.development should match snapshot 1`] = `
"APP_ENV=dev
NODE_TLS_REJECT_UNAUTHORIZED=0
#DEBUG=ioredis:*
"
`;

exports[`preset generator .env.test should match snapshot 1`] = `
"APP_ENV=test
NODE_TLS_REJECT_UNAUTHORIZED=0"
`;

exports[`preset generator .npmrc should match snapshot 1`] = `
"ignore-workspace-root-check=true
strict-peer-dependencies=false
auto-install-peers=true
"
`;

exports[`preset generator .workspace/docker/app/Dockerfile should match snapshot 1`] = `
"# pnpm https://github.com/moby/moby/issues/40449#issuecomment-1758956399
ARG NODE_IMAGE=node:22-alpine3.18
ARG PM2_VERSION=5.3.1
ARG USER_UID=1000

FROM "$NODE_IMAGE" as deps

ENV NODE_ENV=production
ENV PNPM_HOME="/app/.pnpm-store"
ENV PATH="$PNPM_HOME:$PATH"

RUN mkdir -p /app/.pnpm-store && chown -R node:node /app && chmod -R 777 /app && corepack enable && pnpm config set store-dir "$PNPM_HOME"

USER node
WORKDIR /app

COPY --chown=node:node ./pnpm-lock.yaml ./
RUN --mount=type=cache,target=/app/.pnpm-store,uid=\${USER_UID},gid=\${USER_UID} pnpm fetch --prod --ignore-scripts

COPY --chown=node:node ./pnpm-lock.yaml ./package.json ./prod/
RUN --mount=type=cache,ro,target=/app/.pnpm-store,uid=\${USER_UID},gid=\${USER_UID} cd prod && pnpm install --prod --offline --frozen-lockfile --ignore-scripts

##########################
# DEV container tool stage
FROM deps as dev
RUN --mount=type=cache,target=/app/.pnpm-store,uid=\${USER_UID},gid=\${USER_UID} pnpm fetch --dev --ignore-scripts

COPY --chown=node:node ./package.json ./
RUN --mount=type=cache,ro,target=/app/.pnpm-store,uid=\${USER_UID},gid=\${USER_UID} pnpm install --prod=false --offline --frozen-lockfile --ignore-scripts

EXPOSE 3000

CMD ["sleep", "1000"]

#######################
# API application stage
FROM $NODE_IMAGE as app_api
ARG APP_ID

RUN mkdir /app && chown node:node /app && chmod 770 /app && npm i -g pm2@\${PM2_VERSION}
WORKDIR /app

RUN --mount=type=bind,from=deps,source=/app,target=/tmp/deps cp -R -p /tmp/deps/prod/* ./

COPY --chown=node:node ./dist/apps/\${APP_ID} ./apps/\${APP_ID}
COPY --chown=node:node ./dist/libs ./libs
COPY --chown=node:node ./docker/app/pm2.config.cjs ./pm2.config.cjs

USER node
ENV NODE_ENV=production
EXPOSE 3000
RUN ln -s apps/\${APP_ID}/src/index.js entrypoint

CMD ["pm2-runtime", "--json", "pm2.config.cjs"]
"
`;

exports[`preset generator .workspace/docker/app/pm2.config.cjs should match snapshot 1`] = `
"var fs = require('fs');
const configPath = process.env["PM2_CONFIG_PATH"] ?? './config/pm2.config.json';
const config = JSON.parse(fs.readFileSync(configPath, { encoding: 'utf8' }));
module.exports = {
  apps: [
    {
      script: './entrypoint',
      ...config,
    },
  ],
};
"
`;

exports[`preset generator .workspace/docker/dev/.env should match snapshot 1`] = `
"WORKSPACE=test-workspace

HOST_DATA_DIR=./tmp/docker
HOST_CONFIG_DIR=./docker/dev
HOST_CA_DIR=./docker/dev/ca
HOST_CERTS_DIR=./docker/dev/ca/certs
HOST_CA_CRT=./docker/dev/ca/ca.crt

# SERVICES

# Redis
REDIS_HOST_PORT=25010
REDIS_PASSWORD=testredis

# DB
DB_HOST_PORT=25011

"
`;

exports[`preset generator .workspace/docker/dev/docker-compose-dev.yaml should match snapshot 1`] = `
"version: '3.6'
services:
  redis:
    image: bitnami/redis:7.2
    container_name: \${PROJECT}-redis
    restart: always
    environment:
      - ALLOW_EMPTY_PASSWORD=no
      - REDIS_AOF_ENABLED=no
      - REDIS_PASSWORD=\${REDIS_PASSWORD}
      - REDIS_ACLFILE=/bitnami/redis/config/users.acl
    ports:
      - \${REDIS_HOST_PORT}:6379
    volumes:
      - \${HOST_CONFIG_DIR}/redis:/bitnami/redis/config
    tmpfs:
      - /bitnami/redis/data:size=64M
  db:
    image: bitnami/postgresql:16.2.0
    container_name: \${PROJECT}-db
    restart: always
    environment:
      - POSTGRESQL_POSTGRES_PASSWORD=testroot
      - POSTGRESQL_DATABASE=\${PROJECT}
      - POSTGRESQL_USERNAME=\${PROJECT}
      - POSTGRESQL_PASSWORD=test
      - POSTGRESQL_ENABLE_TLS=yes
      - POSTGRESQL_TLS_CERT_FILE=/opt/bitnami/postgresql/certs/db.crt
      - POSTGRESQL_TLS_KEY_FILE=/opt/bitnami/postgresql/certs/db.key
      - POSTGRESQL_TLS_CA_FILE=/opt/bitnami/postgresql/certs/ca.crt
    volumes:
      - \${HOST_CERTS_DIR}/db/db.crt:/opt/bitnami/postgresql/certs/db.crt
      - \${HOST_CERTS_DIR}/db/db.key:/opt/bitnami/postgresql/certs/db.key
      - \${HOST_CA_CRT}:/opt/bitnami/postgresql/certs/ca.crt
    mem_limit: 512M
    tmpfs:
      - /tmp:size=256M
    ports:
      - \${DB_HOST_PORT}:5432
"
`;

exports[`preset generator .workspace/jest/jest.preset.ts should match snapshot 1`] = `
"import type { JestConfigWithTsJest } from 'ts-jest';
import { pathsToModuleNameMapper } from 'ts-jest';
import * as fs from 'fs';
import * as path from 'path';

export interface ProjectMeta {
  name: string;
  workspaceRootRelative: string;
  root: string;
}

export function defineProjectJestConfig(projectDir: string, project: ProjectMeta): JestConfigWithTsJest {
  const tsConfig = JSON.parse(fs.readFileSync(\`\${projectDir}/tsconfig.json\`, 'utf-8'));
  const jestConfig: JestConfigWithTsJest = {
    extensionsToTreatAsEsm: ['.ts'],
    displayName: project.name,
    resolver: '@nx/jest/plugins/resolver',
    transform: {
      '^.+\\\\.m?[tj]sx?$': ['ts-jest', { tsconfig: \`\${projectDir}/tsconfig.test.json\` }],
    },
    runner: "groups",
    moduleFileExtensions: ["js", "json", "ts"],
    moduleNameMapper: pathsToModuleNameMapper(tsConfig.compilerOptions.paths),
    testMatch: ["<rootDir>/test/**/*.test.ts"],
    setupFiles: [],
    setupFilesAfterEnv: ["jest-expect-message", "<rootDir>/test/config.ts"],
    coverageDirectory: \`\${project.workspaceRootRelative}/tmp/coverage/\${project.name}\`,
    testEnvironment: "node",
    transformIgnorePatterns: ["/node_modules/"]
  };

  return jestConfig;
}
"
`;

exports[`preset generator .workspace/storybook/storybook.preset.ts should match snapshot 1`] = `
"import { StorybookConfig } from '@storybook/vue3-vite';
import { ProjectStorybookConfigGenerator, ProjectStorybookConfigGeneratorOptions } from '@hexancore/nx/storybook';

export function defineProjectStorybookConfig(options: ProjectStorybookConfigGeneratorOptions): StorybookConfig {
  const generator = new ProjectStorybookConfigGenerator();
  return generator.create(options);
}
"
`;

exports[`preset generator .workspace/vite/vite.preset.mts should match snapshot 1`] = `
"import {
  AppProjectViteConfigGenerator,
  LibProjectViteConfigGenerator,
  type AppProjectViteConfigGeneratorOptions,
  type LibProjectViteConfigGeneratorOptions,
} from '@hexancore/nx/vite';

import { HcNxRuntimeHelper } from '@hexancore/nx';
import { dirname } from 'path';

const runtimeHelper = new HcNxRuntimeHelper(dirname(dirname(__dirname)));

export function defineLibProjectViteConfig(options: LibProjectViteConfigGeneratorOptions) {
  const generator = new LibProjectViteConfigGenerator(runtimeHelper);
  return generator.create(options);
}

export function defineAppProjectViteConfig(options: AppProjectViteConfigGeneratorOptions) {
  const generator = new AppProjectViteConfigGenerator(runtimeHelper);
  return generator.create(options,);
}
"
`;

exports[`preset generator CONTRIBUTING.md should match snapshot 1`] = `
"# Contributing to test-workspace

First off, thanks for taking the time to contribute! ðŸŽ‰

The following is a set of guidelines for contributing to test-workspace. These are mostly guidelines, not rules. Use your best judgment, and feel free to propose changes to this document in a pull request.


## How Can I Contribute?

### Reporting Bugs

This section guides you through submitting a bug report for test-workspace. Following these guidelines helps maintainers understand your report, reproduce the behavior, and find related reports.

- **Ensure the bug was not already reported** by searching on [PLACEHOLDER]
- If you're unable to find an open issue addressing the problem, open a new one. Be sure to include:
  - A clear and descriptive title.
  - A detailed description of the bug.
  - Steps to reproduce the bug.
  - Expected and actual results.
  - Screenshots or code samples, if applicable.

### Suggesting Enhancements

This section guides you through submitting an enhancement suggestion for test-workspace, including completely new features and minor improvements to existing functionality.

- **Ensure the enhancement was not already suggested** by searching on [PLACEHOLDER].
- If you're unable to find an open issue addressing the idea, open a new one. Be sure to include:
  - A clear and descriptive title.
  - A detailed description of the enhancement.
  - Any relevant screenshots or mockups.

### Your First Code Contribution

### Pull Requests

The process described here will help you contribute to test-workspace. Please follow these steps to ensure your contribution is accepted:

1. Fork the repository and create your branch from \`main\`.
2. If you've added code that should be tested, add tests.
3. If you've changed APIs, update the documentation.
4. Ensure the test suite passes.
5. Make sure your code lints.
6. Issue that pull request!

### Coding Style

Please follow the coding standards used throughout the existing code base. Some general guidelines:

- Use descriptive variable and function names.
- Write comments where necessary for clarity.
- Ensure your code passes all linting checks.

## Style Guides

### Git Commit Messages

- Use the present tense ("Add feature" not "Added feature").
- Use the imperative mood ("Move cursor to..." not "Moves cursor to...").
- Limit the first line to 72 characters or less.
- Reference issues and pull requests liberally.

## Additional Notes

### Issue and Pull Request Labels

This section lists the labels we use to help us track and manage issues and pull requests.

- \`bug\`: Something isn't working
- \`enhancement\`: New feature or request
- \`question\`: Further information is requested
- \`documentation\`: Improvements or additions to documentation
- \`help wanted\`: Extra attention is needed

---

Thank you for your contributions! Your help is greatly appreciated."
`;

exports[`preset generator Makefile should match snapshot 1`] = `
"export ENV ?= dev
export WORKSPACE = test-workspace

## PATHS
export BIN_ROOT_PATH = ./.workspace/bin
export UTIL_ROOT_PATH = $(realpath $(BIN_ROOT_PATH)/util)
export UTIL_PATH = $(UTIL_ROOT_PATH)/util.sh

## VERSION
ifeq "$(ENV)" "dev"
  export VERSION = dev
endif

export DOCKER_DIR = .workspace/docker
DC=docker compose -p $(WORKSPACE) --project-directory .

# Help target settings
INFO = Showing targets for all of ENV(default: dev)
EXTRA_MAKE_ARGS = ENV=test|prod
HELP_TARGET_MAX_CHAR_NUM = 30
HAS_DEPS = yes
.DEFAULT_GOAL := help
include $(UTIL_ROOT_PATH)/MakeHelp

# Check version is sets and is not help target
ifneq ($(MAKECMDGOALS),)
  ifneq ($(MAKECMDGOALS),help)
    ifndef VERSION
      $(error VERSION is not set)
    endif
  endif
endif

ifeq "$(ENV)" "prod"
## prod targets
endif

ifeq "$(ENV)" "dev"

init_devenv:
	cp ./.vscode/settings.json.template ./.vscode/settings.json

## Reinitialize testing env
up:
	if [ "$CI" = "1" ]; then
		mkdir -p ./tmp/docker
		chmod 777 ./tmp/docker
		chmod 640 -R ./docker/ca/certs/db
	fi
	$(DC) -f $(DOCKER_DIR)/dev/docker-compose-dev.yaml --env-file $(DOCKER_DIR)/dev/.env up -d --wait --wait-timeout 5
	sleep 3

## Clear testing env
down:
	$(DC) down -t 2

build_dev_image:
	DOCKER_BUILDKIT=1 docker build -t test-workspace/dev:latest -f $(DOCKER_DIR)/app/Dockerfile --target=dev .

endif"
`;

exports[`preset generator README.md should match snapshot 1`] = `
"# test-workspace

Replace with Yours project workspace description.

## Getting started

To start contributing you need install some tools and init developer environment.

### Tools
 - NodeJS
 - pnpm
 - Nx (\`pnpm add --global nx@19.2.2\`)
 - Docker + Compose
 - make

To init developer environment run:
\`\`\`bash
make init_devenv
\`\`\`

## Contributing

Contributing Guide is in separate file [CONTRIBUTING.md](./CONTRIBUTING.md)"
`;

exports[`preset generator nx.json should match snapshot 1`] = `
"{
  "affected": {
    "defaultBase": "main"
  },
  "targetDefaults": {
    "build": {
      "cache": true
    },
    "lint": {
      "cache": true
    },
    "@nx/js:tsc": {
      "cache": true,
      "inputs": [
        "production",
        "^production"
      ],
      "outputs": [
        "{options.outputPath}"
      ],
      "dependsOn": [
        "^build",
        "test"
      ],
      "options": {
        "outputPath": "{workspaceRoot}/dist/{projectRoot}",
        "tsConfig": "{projectRoot}/tsconfig.build.json",
        "transformers": [
          {
            "name": "typescript-transform-paths/nx-transformer"
          }
        ]
      }
    },
    "@nx/eslint:lint": {
      "inputs": [
        "default",
        "{workspaceRoot}/.eslintrc.json",
        "{workspaceRoot}/.eslintignore"
      ],
      "cache": true,
      "options": {
        "lintFilePatterns": [
          "{projectRoot}/**/*.ts",
          "{projectRoot}/package.json"
        ]
      },
      "configurations": {
        "fix": {
          "fix": true,
          "cache": false
        }
      }
    },
    "@nx/jest:jest": {
      "cache": true,
      "inputs": [
        "default",
        "{workspaceRoot}/.workspace/jest/**/*"
      ],
      "options": {
        "jestConfig": "{projectRoot}/jest.config.ts",
        "runInBand": true,
        "passWithNoTests": true
      },
      "configurations": {
        "watch": {
          "watch": true
        },
        "ci": {
          "ci": true,
          "codeCoverage": true
        },
        "updateSnapshot": {
          "updateSnapshot": true
        },
        "codeCoverage": {
          "codeCoverage": true
        }
      }
    },
    "@nx/vite:build": {
      "cache": true,
      "inputs": [
        "production",
        "^production"
      ],
      "outputs": [
        "{options.outputPath}"
      ],
      "defaultConfiguration": "production",
      "options": {
        "outputPath": "dist/{projectRoot}",
        "skipTypeCheck": true,
        "configFile": "{projectRoot}/vite.config.mts",
        "tsConfig": "{projectRoot}/tsconfig.build.json",
        "generatePackageJson": false
      },
      "configurations": {
        "development": {
          "mode": "development"
        },
        "production": {
          "mode": "production"
        }
      }
    },
    "@nx/vite:preview-server": {
      "defaultConfiguration": "development",
      "cache": false,
      "options": {
        "buildTarget": "build"
      },
      "configurations": {
        "development": {
          "buildTarget": "build:development"
        },
        "production": {
          "buildTarget": "build:production"
        }
      }
    },
    "@nx/vite:dev-server": {
      "cache": false,
      "defaultConfiguration": "development",
      "options": {
        "buildTarget": "build"
      },
      "configurations": {
        "development": {
          "buildTarget": "build:development"
        },
        "production": {
          "buildTarget": "build:production"
        }
      }
    },
    "@nx/vite:test": {
      "cache": true,
      "inputs": [
        "default"
      ],
      "options": {
        "configFile": "{projectRoot}/vite.config.mts",
        "passWithNoTests": true,
        "reportsDirectory": "{workspaceRoot}/coverage/{projectRoot}"
      },
      "configurations": {
        "watch": {
          "watch": true
        }
      }
    },
    "@nx/storybook:storybook": {
      "cache": false,
      "options": {
        "port": 4400,
        "configDir": "{projectRoot}/.storybook"
      },
      "configurations": {
        "ci": {
          "quiet": true
        }
      }
    },
    "@nx/storybook:build": {
      "inputs": [
        "storybook"
      ],
      "cache": true,
      "outputs": [
        "{options.outputDir}"
      ],
      "options": {
        "outputDir": "{workspaceRoot}/dist/storybook/{projectRoot}",
        "configDir": "{projectRoot}/.storybook"
      },
      "configurations": {
        "ci": {
          "quiet": true
        }
      }
    },
    "storybook-test": {
      "executor": "nx:run-commands",
      "options": {
        "command": "test-storybook -c {projectRoot}/.storybook --url=http://localhost:4400"
      }
    },
    "storybook-static": {
      "executor": "@nx/web:file-server",
      "options": {
        "buildTarget": "storybook-build",
        "staticFilePath": "{workspaceRoot}/dist/storybook/{projectRoot}",
        "spa": true
      },
      "configurations": {
        "ci": {
          "buildTarget": "storybook-build:ci"
        }
      }
    }
  },
  "extends": "nx/presets/npm.json",
  "pluginsConfig": {
    "@nx/js": {
      "analyzeSourceFiles": true
    }
  },
  "namedInputs": {
    "default": [
      "{projectRoot}/**/*",
      "sharedGlobals"
    ],
    "sharedGlobals": [],
    "production": [
      "default",
      "!{projectRoot}/test/**/*",
      "!{projectRoot}/jest.config.{js,ts,mjs,mts}",
      "!{projectRoot}/tsconfig.test.json",
      "!{projectRoot}/.eslintrc.json",
      "{workspaceRoot}/.workspace/vite/**/*"
    ],
    "storybook": [
      "production",
      "{projectRoot}/**/*.stories.ts",
      "{workspaceRoot}/.workspace/storybook/**/*"
    ]
  },
  "generators": {
    "@nx/workspace:move": {
      "projectNameAndRootFormat": "as-provided"
    }
  },
  "useInferencePlugins": false,
  "defaultBase": "main",
  "workspaceLayout": {
    "appsDir": "apps",
    "libsDir": "libs"
  }
}
"
`;

exports[`preset generator package.json should match snapshot 1`] = `
"{
  "name": "@proj/source",
  "dependencies": {
    "@hexancore/auth": "0.5.*",
    "@hexancore/cloud": "0.3.*",
    "@hexancore/common": "0.15.*",
    "@hexancore/core": "0.16.*",
    "@hexancore/typeorm": "0.16.*",
    "@nestjs/common": "^10.3.9",
    "@nestjs/config": "^3.0.0",
    "@nestjs/core": "^10.3.9",
    "@nestjs/cqrs": "^10.2.5",
    "@nestjs/platform-fastify": "^10.3.9",
    "@nestjs/swagger": "^7.1.8",
    "axios": "^1.7.2",
    "fs-extra": "^11.2.0",
    "glob": "^10.4.1",
    "ioredis": "^5.3.2",
    "nestjs-cls": "^4.3.0",
    "oidc-provider": "^8.4.6",
    "openid-client": "^5.6.5",
    "pg": "^8.12.0",
    "reflect-metadata": "^0.1.13",
    "rxjs": "^7.8.0",
    "tslib": "2.6.3",
    "typeorm": "^0.3.20"
  },
  "devDependencies": {
    "@babel/core": "^7.24.4",
    "@babel/plugin-transform-modules-commonjs": "^7.24.4",
    "@babel/preset-env": "^7.24.4",
    "@hexancore/mocker": "^1.1.2",
    "@hexancore/nx": "0.4.0",
    "@intlify/eslint-plugin-vue-i18n": "^2.0.0",
    "@intlify/unplugin-vue-i18n": "^4.0.0",
    "@jest/globals": "^29.7.0",
    "@nestjs/testing": "^10.3.8",
    "@nx/esbuild": "19.2.2",
    "@nx/eslint-plugin": "19.2.2",
    "@nx/jest": "19.2.2",
    "@nx/js": "19.2.2",
    "@nx/linter": "19.2.2",
    "@nx/storybook": "19.2.2",
    "@nx/vite": "19.2.2",
    "@nx/vue": "19.2.2",
    "@nx/web": "19.2.2",
    "@rollup/plugin-node-resolve": "^15.2.3",
    "@samatech/postcss-basics": "^0.6.0",
    "@storybook/addon-essentials": "^8.1.5",
    "@storybook/addon-interactions": "^8.1.5",
    "@storybook/builder-vite": "^8.1.5",
    "@storybook/core-server": "^8.1.5",
    "@storybook/test": "^8.1.5",
    "@storybook/vue3": "^8.1.5",
    "@storybook/vue3-vite": "^8.1.5",
    "@stylistic/eslint-plugin": "^2.1.0",
    "@types/jest": "^29.5.12",
    "@types/node": "^20.12.12",
    "@typescript-eslint/parser": "^7.10.0",
    "@vitejs/plugin-basic-ssl": "^1.1.0",
    "@vitejs/plugin-vue": "^5.0.4",
    "@vitest/coverage-v8": "1.6.*",
    "@vitest/ui": "1.6.*",
    "@vue/eslint-config-prettier": "^7.1.0",
    "@vue/eslint-config-typescript": "^11.0.3",
    "@vue/test-utils": "^2.4.5",
    "@vue/tsconfig": "^0.4.0",
    "autoprefixer": "^10.4.19",
    "axios-mock-adapter": "^1.22.0",
    "esbuild": "^0.19.12",
    "eslint": "8.57.0",
    "eslint-plugin-import": "^2.29.1",
    "eslint-plugin-vue": "^9.25.0",
    "happy-dom": "^14.11.0",
    "husky": "^9.0.11",
    "jest": "^29.7.0",
    "jest-docblock": "^29.7.0",
    "jest-environment-jsdom": "^29.7.0",
    "jest-environment-node": "^29.7.0",
    "jest-expect-message": "^1.1.3",
    "jest-runner": "^29.7.0",
    "jest-runner-groups": "^2.2.0",
    "jsdom": "^24.0.0",
    "pinia": "^2.1.7",
    "postcss": "^8.4.38",
    "prettier": "3.2.5",
    "primeflex": "^3.3.1",
    "primeicons": "^7.0.0",
    "primevue": "^3.52.0",
    "rollup": "^4.17.0",
    "sass": "^1.75.0",
    "storybook": "^8.1.5",
    "stylelint": "^16.6.0",
    "stylelint-config-standard": "^36.0.0",
    "ts-jest": "^29.1.2",
    "tsconfig": "^7.0.0",
    "typescript": "5.4.5",
    "typescript-transform-paths": "^3.4.7",
    "unplugin-swc": "^1.4.5",
    "unplugin-vue-components": "^0.27.0",
    "vee-validate": "^4.12.6",
    "vite": "^5.2.10",
    "vite-plugin-dts": "3.9.1",
    "vite-plugin-lib-inject-css": "2.1.1",
    "vitest": "1.6.*",
    "vue": "^3.4.25",
    "vue-eslint-parser": "^9.4.2",
    "vue-i18n": "^9.13.1",
    "vue-router": "^4.3.2",
    "vue-tsc": "^1.8.27"
  },
  "license": "UNLICENSED",
  "scripts": {
    "prepare": "node .husky/install.mjs",
    "precommit": "nx run-many --targets=lint,test,build",
    "ci": "nx run-many --targets=lint,test,build --configuration=ci"
  }
}
"
`;

exports[`preset generator tsconfig.base.json should match snapshot 1`] = `
"{
  "compileOnSave": false,
  "compilerOptions": {
    "rootDir": ".",
    "moduleResolution": "Node16",
    "module": "Node16",
    "target": "ES2022",
    "lib": [
      "ES2022"
    ],
    "esModuleInterop": true,
    "sourceMap": true,
    "declaration": true,
    "emitDecoratorMetadata": true,
    "experimentalDecorators": true,
    "noImplicitOverride": true,
    "noImplicitAny": false,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noPropertyAccessFromIndexSignature": false,
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true,
    "importHelpers": true,
    "skipLibCheck": true,
    "skipDefaultLibCheck": true,
    "allowJs": true,
    "baseUrl": ".",
    "resolveJsonModule": true,
    "plugins": [
      // Transform paths in output .js files
      {
        "transform": "typescript-transform-paths"
      },
      // Transform paths in output .d.ts files (Include this line if you output declarations files)
      {
        "transform": "typescript-transform-paths",
        "afterDeclarations": true
      }
    ]
  },
  "exclude": [
    "node_modules",
    "tmp"
  ]
}"
`;

exports[`preset generator tsconfig.frontend.base.json should match snapshot 1`] = `
"{
  "extends": "./tsconfig.base.json",
  "compilerOptions": {
    "moduleResolution": "Bundler",
    "module": "ES2022",
    "lib": [
      "ES2022",
      "DOM"
    ],
    "types": [
      "vite/client",
      "vitest",
      "@intlify/unplugin-vue-i18n/messages"
    ],
    "jsx": "preserve",
    "jsxImportSource": "vue",
    "verbatimModuleSyntax": false,
    "useDefineForClassFields": true,
    "isolatedModules": true,
    "noEmit": true
  }
}"
`;
