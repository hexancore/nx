// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Library Generator: Frontend libs/task-manager/frontend/.eslintrc.json should match snapshot 1`] = `
"{
  "extends": [
    "plugin:vue/vue3-essential",
    "eslint:recommended",
    "@vue/eslint-config-typescript",
    "@vue/eslint-config-prettier/skip-formatting",
    "../../../.eslintrc.json"
  ],
  "ignorePatterns": ["!**/*"],
  "overrides": [
    {
      "files": ["*.ts", "*.tsx", "*.js", "*.jsx", "*.vue"],
      "rules": {
        "vue/multi-word-component-names": "off"
      }
    }
  ]
}
"
`;

exports[`Library Generator: Frontend libs/task-manager/frontend/.storybook/main.ts should match snapshot 1`] = `
"import { dirname } from "path";
import { defineProjectStorybookConfig } from "../../../../.workspace/storybook/storybook.preset";

export default defineProjectStorybookConfig({
  workspaceProjectDir: dirname(__dirname),
  staticDirs: [],
});
"
`;

exports[`Library Generator: Frontend libs/task-manager/frontend/.storybook/preview.ts should match snapshot 1`] = `"export const tags = ["autodocs"];"`;

exports[`Library Generator: Frontend libs/task-manager/frontend/README.md should match snapshot 1`] = `
"# task-manager-frontend


"
`;

exports[`Library Generator: Frontend libs/task-manager/frontend/package.json should match snapshot 1`] = `
"{
  "name": "@testcompany/task-manager-frontend",
  "type": "module",
  "private": true,
  "dependencies": {
    "tslib": "2.6.2"
  },
  "sideEffects": [
    "**/*.css"
  ]
}
"
`;

exports[`Library Generator: Frontend libs/task-manager/frontend/project.json should match snapshot 1`] = `
"{
  "name": "task-manager-frontend",
  "$schema": "../../../node_modules/nx/schemas/project-schema.json",
  "projectType": "library",
  "sourceRoot": "libs/task-manager/frontend/src",
  "targets": {
    "lint": {
      "executor": "@nx/eslint:lint"
    },
    "test": {
      "executor": "@nx/vite:test"
    },
    "build": {
      "executor": "@nx/vite:build"
    },
    "storybook": {
      "executor": "@nx/storybook:storybook"
    },
    "storybook-test": {
      "executor": "nx:run-commands"
    },
    "storybook-build": {
      "executor": "@nx/storybook:build"
    },
    "storybook-static": {
      "executor": "@nx/web:file-server"
    }
  }
}
"
`;

exports[`Library Generator: Frontend libs/task-manager/frontend/src/Asset/Style/variables.scss should match snapshot 1`] = `
"$primary-color: #3498db;
$secondary-color: #2ecc71;

body {
  background-color: $primary-color;
}"
`;

exports[`Library Generator: Frontend libs/task-manager/frontend/src/Component/Button/Button.stories.ts should match snapshot 1`] = `
"import type { Meta, StoryObj } from '@storybook/vue3';

import Button from './Button.vue';
import { h } from 'vue';

const meta = {
  title: 'Example/Button',
  component: Button,

  tags: ['autodocs'],
  argTypes: {
    size: { control: 'select', options: ['small', 'medium', 'large'] },
    backgroundColor: { control: 'color' },
    onClick: { action: 'clicked' },
  },
  args: { primary: false }, // default value
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;
const iconImg = 'image/logo.png';

export const Primary: Story = {
  args: {
    primary: true,
    label: 'Hexancore',
    icon: h('img',{src:iconImg,height:64}),
    default:h('span',{style:{color:'yellow',padding:'16px'}},'Default Slot Content')
  },
};

export const Secondary: Story = {
  args: {
    primary: false,
    label: 'Hexancore',
    icon: h('img',{src:iconImg,height:64}),
    default:()=>'Default Slot Content as Text',
  },
};"
`;

exports[`Library Generator: Frontend libs/task-manager/frontend/src/Component/Button/Button.vue should match snapshot 1`] = `
"<template>
  <button type="button" :class="classes" @click="onClick" :style="style">
    <slot name="icon"></slot> {{ label }} <slot></slot>
    <slot name="BoxComponent"></slot>
  </button>

</template>

<script lang="ts" setup>
import { computed } from 'vue';

const props = withDefaults(defineProps<{
  /**
   * The label of the button
   */
  label: string,
  /**
   * primary or secondary button
   */
  primary?: boolean,
  /**
   * size of the button
   */
  size?: 'small' | 'medium' | 'large',
  /**
   * background color of the button
   */
  backgroundColor?: string,

}>(), { primary: false });

const emit = defineEmits<{
  (e: 'click', id: number): void;
}>();

const classes = computed(() => ({
  'storybook-button': true,
  'storybook-button--primary': props.primary,
  'storybook-button--secondary': !props.primary,
  [\`storybook-button--\${props.size || 'medium'}\`]: true,
}));

const style = computed(() => ({
  backgroundColor: props.backgroundColor
}));

const onClick = () => {
  emit("click", 1)
};

</script>

<style lang='scss'>

.storybook-button {
  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;
  font-weight: 700;
  border: 0;
  border-radius: 3em;
  cursor: pointer;
  display: inline-flex;
  align-items: center;
  line-height: 1;
}

.storybook-button:hover {
    background-color: #007bb5;
    transform: scale(1.05);
}


.storybook-button:active {
    background-color: #005f87;
    transform: scale(0.95);
}

.storybook-button--primary {
  color: white;
  background-color: #1ea7fd;
}
.storybook-button--secondary {
  color: #333;
  background-color: transparent;
  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;
}

.storybook-button--secondary:hover {
  background-color: rgba(0, 0, 0, 0.1); /* Lekko ciemniejsze tło przy hover */
  box-shadow: rgba(0, 0, 0, 0.25) 0px 0px 0px 1px inset;
  transform: scale(1.05);
}

.storybook-button--secondary:active {
  background-color: rgba(0, 0, 0, 0.2); /* Jeszcze ciemniejsze tło przy aktywacji */
  box-shadow: rgba(0, 0, 0, 0.35) 0px 0px 0px 1px inset;
  transform: scale(0.95);
}

.storybook-button--small {
  font-size: 12px;
  padding: 10px 16px;
}
.storybook-button--medium {
  font-size: 14px;
  padding: 11px 20px;
}
.storybook-button--large {
  font-size: 16px;
  padding: 12px 24px;
}
</style>"
`;

exports[`Library Generator: Frontend libs/task-manager/frontend/src/vue-shims.d.ts should match snapshot 1`] = `
"declare module '*.vue' {
  import { defineComponent } from 'vue';
  const component: ReturnType<typeof defineComponent>;
  export default component;
}
"
`;

exports[`Library Generator: Frontend libs/task-manager/frontend/tsconfig.build.json should match snapshot 1`] = `
"{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "outDir": "../../../dist/out-tsc",
    "types": ["vite/client"]
  },
  "exclude": [
    "**/*.stories.ts"
  ],
  "include": ["src/**/*.ts","src/**/*.tsx", "src/**/*.vue"]
}
"
`;

exports[`Library Generator: Frontend libs/task-manager/frontend/tsconfig.json should match snapshot 1`] = `
"{
  "extends": "../../../tsconfig.frontend.base.json",
  "compilerOptions": {
    "paths": {
      "@": [
        "libs/task-manager/frontend/src"
      ],
      "@/*": [
        "libs/task-manager/frontend/src/*"
      ],
      "@test/*": [
        "libs/task-manager/frontend/test/helper/*"
      ]
    }
  },
  "files": [],
  "include": [],
  "references": [
    {
      "path": "./tsconfig.build.json"
    },
    {
      "path": "./tsconfig.test.json"
    },
    {
      "path": "./tsconfig.storybook.json"
    }
  ]
}
"
`;

exports[`Library Generator: Frontend libs/task-manager/frontend/tsconfig.storybook.json should match snapshot 1`] = `
"{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "emitDecoratorMetadata": true
  },
  "include": [
    "src/**/*.stories.ts",
    "src/**/*.stories.tsx",
    ".storybook/*.ts",
    ".storybook/*.mts"
  ]
}
"
`;

exports[`Library Generator: Frontend libs/task-manager/frontend/tsconfig.test.json should match snapshot 1`] = `
"{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "outDir": "../../../dist/out-tsc",
    "types": ["vitest/globals", "vitest/importMeta", "vite/client", "node", "vitest"]
  },
  "include": ["vite.config.mts", "test/**/*.ts", "test/**/*.tsx"]
}
"
`;

exports[`Library Generator: Frontend libs/task-manager/frontend/vite.config.mts should match snapshot 1`] = `
"import { defineLibProjectViteConfig } from "../../../.workspace/vite/vite.preset.mjs";

const options = {
  workspaceProjectDir: __dirname
};
export default defineLibProjectViteConfig(options);
"
`;

exports[`Library Generator: Frontend nx.json should match snapshot 1`] = `"{"affected":{"defaultBase":"main"},"targetDefaults":{"build":{"cache":true},"lint":{"cache":true}}}"`;

exports[`Library Generator: Frontend package.json should match snapshot 1`] = `
"{
  "name": "@testcompany/source"
}
"
`;

exports[`Library Generator: Frontend tsconfig.base.json should match snapshot 1`] = `
"{
  "compilerOptions": {
    "paths": {
      "@testcompany/task-manager-frontend": [
        "libs/task-manager/frontend/src/index.ts"
      ]
    }
  }
}
"
`;
